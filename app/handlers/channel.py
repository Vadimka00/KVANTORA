from aiogram import Router
from aiogram.types import Message, ReactionTypeEmoji, ReactionTypeCustomEmoji
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select
from ..config import config
from ..db import SessionLocal
from ..keyboards import comment_kb
from ..models import Channel
import asyncio, random

router = Router()

def _pick_random_reactions() -> list:
    pool = []
    # –æ–±—ã—á–Ω—ã–µ Unicode
    for e in (config.auto_reactions or []):
        pool.append(ReactionTypeEmoji(emoji=e))
    # –∫–∞—Å—Ç–æ–º–Ω—ã–µ (–ø—Ä–µ–º–∏—É–º) –ø–æ ID
    for cid in (config.custom_reaction_ids or []):
        pool.append(ReactionTypeCustomEmoji(custom_emoji_id=cid))
    if not pool:
        return []
    k = random.randint(1, min(len(pool), config.reaction_max_count))
    return random.sample(pool, k)

async def _try_set_reactions(bot, chat_id: int, msg_id: int):
    attempts = max(1, config.reaction_attempts)
    last_err = None
    for i in range(attempts):
        reactions = _pick_random_reactions()
        if not reactions:
            return False

        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é reaction_big_prob –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–∞–∫—Ü–∏—é ¬´–±–æ–ª—å—à–æ–π¬ª
        is_big = random.random() < config.reaction_big_prob

        try:
            await bot.set_message_reaction(
                chat_id=chat_id,
                message_id=msg_id,
                reaction=reactions,
                is_big=is_big,
            )
            return True
        except TelegramBadRequest as e:
            last_err = e
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ Unicode-—Ä–µ–∞–∫—Ü–∏–∏ (—á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –∫–∞—Å—Ç–æ–º–∫–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
            unicode_only = [r for r in reactions if isinstance(r, ReactionTypeEmoji)]
            if unicode_only:
                try:
                    await bot.set_message_reaction(
                        chat_id=chat_id,
                        message_id=msg_id,
                        reaction=unicode_only,
                        is_big=is_big,
                    )
                    return True
                except TelegramBadRequest as e2:
                    last_err = e2
            # –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –∏ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –Ω–∞–±–æ—Ä–æ–º
            await asyncio.sleep(0.5 * (i + 1))
        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            last_err = e
            break
    if last_err:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫:", last_err)
    return False

@router.channel_post()
async def on_channel_post(msg: Message):
    if msg.chat.id not in config.allowed_channels:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞
    async with SessionLocal() as session:
        ch = (await session.execute(select(Channel).where(Channel.chat_id == msg.chat.id))).scalar_one_or_none()
        if not ch:
            ch = Channel(chat_id=msg.chat.id, username=msg.chat.username, title=msg.chat.title)
            session.add(ch)
        else:
            ch.username = msg.chat.username
            ch.title = msg.chat.title
        await session.commit()

    # –í–µ—à–∞–µ–º –∫–Ω–æ–ø–∫—É
    try:
        await msg.bot.edit_message_reply_markup(
            chat_id=msg.chat.id,
            message_id=msg.message_id,
            reply_markup=comment_kb(msg.chat.id, msg.message_id)
        )
    except TelegramBadRequest:
        pass

    # üî• –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –Ω–æ–≤–æ–º—É –ø–æ—Å—Ç—É
    await _try_set_reactions(msg.bot, msg.chat.id, msg.message_id)