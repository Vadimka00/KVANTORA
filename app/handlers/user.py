from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.types import Message, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select
import html, re, asyncio
from collections import defaultdict

from ..config import config
from ..db import SessionLocal
from ..antispam import check_and_hit
from ..models import User, Comment, CommentMedia, Channel
from ..utils import build_post_link

router = Router()
print("‚úÖ handlers/user.py –ø–æ–¥–∫–ª—é—á—ë–Ω")

# user_id -> (channel_chat_id, post_id)
_pending: dict[int, tuple[int, int]] = {}

BOT_SIGNATURE = f'<a href="https://t.me/{config.bot_username}">KVANTORA‚Ñ¢</a>'

# ---------- –ü–∞—Ä—Å–µ—Ä –º–µ—Ç–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞/–ø–æ–¥–ø–∏—Å–∏ ----------
_CTX_RE = re.compile(r"UID:(-?\d+)\b.*?CID:(-?\d+)\b.*?PID:(\d+)\b(?:.*?AMID:(\d+))?", re.S)
def _extract_ctx_from_text(text: str):
    m = _CTX_RE.search(text or "")
    if not m:
        return None
    uid, cid, pid, amid = m.groups()
    return int(uid), int(cid), int(pid), (int(amid) if amid else None)

def _try_extract_from_replied_chain(msg: Message):
    """–ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –º–µ—Ç–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –∏–∑ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è (–≥–ª—É–±–∏–Ω–∞ 2)."""
    if not msg.reply_to_message:
        return None
    src = msg.reply_to_message
    ctx = _extract_ctx_from_text((src.text or src.caption or ""))
    if ctx:
        return ctx
    if src.reply_to_message:
        return _extract_ctx_from_text((src.reply_to_message.text or src.reply_to_message.caption or ""))
    return None

# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (HTML) ----------
def _hdr_admin_to_user(link: str | None, uid: int, cid: int, pid: int, amid: int, caption: str | None) -> str:
    base = (
        "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        f"–ü–æ—Å—Ç: {html.escape(link) if link else f'chat_id={cid}, msg_id={pid}'}\n\n"
    )
    quote = f"<blockquote>{html.escape(caption)}</blockquote>\n\n" if caption else ""
    markers = f"<tg-spoiler>UID:{uid} CID:{cid} PID:{pid} AMID:{amid}</tg-spoiler>"
    hint = "\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    return base + quote + markers + hint

def _hdr_user_to_admin_new(who: str, link: str | None, uid: int, cid: int, pid: int, caption: str | None) -> str:
    base = (
        "üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(who)}\n"
        f"–ü–æ—Å—Ç: {html.escape(link) if link else f'chat_id={cid}, msg_id={pid}'}\n\n"
    )
    quote = f"<blockquote>{html.escape(caption)}</blockquote>\n\n" if caption else ""
    markers = f"<tg-spoiler>UID:{uid} CID:{cid} PID:{pid}</tg-spoiler>"
    hint = "\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    return base + quote + markers + hint

def _hdr_user_to_admin_reply(who: str, link: str | None, uid: int, cid: int, pid: int, caption: str | None) -> str:
    base = (
        "‚Ü©Ô∏è <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(who)}\n"
        f"–ü–æ—Å—Ç: {html.escape(link) if link else f'chat_id={cid}, msg_id={pid}'}\n\n"
    )
    quote = f"<blockquote>{html.escape(caption)}</blockquote>\n\n" if caption else ""
    markers = f"<tg-spoiler>UID:{uid} CID:{cid} PID:{pid}</tg-spoiler>"
    return base + quote + markers
# –ò–º—è –∫–∞–Ω–∞–ª–∞
async def _channel_display_name(bot, cid: int) -> str:
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –ë–î
    async with SessionLocal() as session:
        ch = (await session.execute(select(Channel).where(Channel.chat_id == cid))).scalar_one_or_none()
    if ch:
        if ch.title:
            return ch.title
        if ch.username:
            return f"@{ch.username}"
        return str(cid)
    # –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ø—Ä–æ—Å–∏—Ç—å —É Telegram
    try:
        chat = await bot.get_chat(cid)
        return chat.title or (f"@{chat.username}" if chat.username else str(cid))
    except Exception:
        return str(cid)

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (–≥–æ–ª–æ—Å/–∫—Ä—É–∂–æ–∫ -> –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—Ä–µ—Ç–µ) ----------
async def _safe_copy_or_send(bot, target_chat_id: int, src_msg: Message, reply_to_message_id: int | None = None):
    """
    copy_message; –µ—Å–ª–∏ VOICE/VIDEO_NOTE –∑–∞–ø—Ä–µ—â–µ–Ω—ã ‚Äî —à–ª—ë–º –∫–∞–∫ document —Å –ø–æ–¥–ø–∏—Å—å—é.
    """
    try:
        return await bot.copy_message(
            chat_id=target_chat_id,
            from_chat_id=src_msg.chat.id,
            message_id=src_msg.message_id,
            reply_to_message_id=reply_to_message_id
        )
    except TelegramBadRequest as e:
        text = str(e)
        cap = (src_msg.caption or "").strip()
        if "VOICE_MESSAGES_FORBIDDEN" in text and src_msg.voice:
            return await bot.send_document(
                chat_id=target_chat_id,
                document=src_msg.voice.file_id,
                caption=(html.escape(cap) if cap else None),
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id
            )
        if "VIDEO_MESSAGES_FORBIDDEN" in text and src_msg.video_note:
            return await bot.send_document(
                chat_id=target_chat_id,
                document=src_msg.video_note.file_id,
                caption=(html.escape(cap) if cap else None),
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id
            )
        raise

# ---------- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ media –¥–ª—è sendMediaGroup ----------
def _as_input_media(m: Message, with_caption: bool, override_caption: str | None = None):
    """
    –ï—Å–ª–∏ override_caption –∑–∞–¥–∞–Ω ‚Äî –∫–ª–∞–¥—ë–º –µ–≥–æ (HTML) –≤ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≥—Ä—É–ø–ø—ã.
    """
    cap = override_caption if (with_caption and override_caption is not None) else ((m.caption or "").strip() if with_caption else None)
    if m.photo:
        return InputMediaPhoto(media=m.photo[-1].file_id,
                               caption=cap if cap else None,
                               parse_mode="HTML")
    if m.video:
        return InputMediaVideo(media=m.video.file_id,
                               caption=cap if cap else None,
                               parse_mode="HTML")
    if m.document:
        return InputMediaDocument(media=m.document.file_id,
                                  caption=cap if cap else None,
                                  parse_mode="HTML")
    return None  # voice / video_note / audio ‚Äî –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ sendMediaGroup

# ---------- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id/—Ç–∏–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î ----------
def _media_records_from_message(m: Message, mgid: str | None):
    recs = []
    if m.photo:
        p = m.photo[-1]
        recs.append(("photo", p.file_id, p.file_unique_id, mgid))
    elif m.video:
        recs.append(("video", m.video.file_id, m.video.file_unique_id, mgid))
    elif m.document:
        recs.append(("document", m.document.file_id, m.document.file_unique_id, mgid))
    elif m.voice:
        recs.append(("voice", m.voice.file_id, m.voice.file_unique_id, mgid))
    elif m.video_note:
        recs.append(("video_note", m.video_note.file_id, m.video_note.file_unique_id, mgid))
    elif m.audio:
        recs.append(("audio", m.audio.file_id, m.audio.file_unique_id, mgid))
    return recs

# ---------- USER -> ADMIN –∞–ª—å–±–æ–º—ã ----------
_u2a_buf: dict[str, list[Message]] = defaultdict(list)
_u2a_ctx: dict[str, dict] = {}      # {mgid: {mode:'new'|'reply', who, uid, cid, pid, amid, link, mgid}}
_u2a_task: dict[str, asyncio.Task] = {}
_u2a_album_comment_id: dict[str, int] = {}

async def _flush_u2a(mgid: str):
    parts = _u2a_buf.pop(mgid, [])
    ctx = _u2a_ctx.pop(mgid, None)
    _u2a_task.pop(mgid, None)
    if not parts or not ctx:
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–æ–¥–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    cap_text = (parts[0].caption or "").strip() if parts else None
    if ctx["mode"] == "reply":
        header = _hdr_user_to_admin_reply(ctx["who"], ctx["link"], ctx["uid"], ctx["cid"], ctx["pid"], cap_text or None)
        reply_to = ctx["amid"] or None
    else:
        header = _hdr_user_to_admin_new(ctx["who"], ctx["link"], ctx["uid"], ctx["cid"], ctx["pid"], cap_text or None)
        reply_to = None

    media = []
    for i, p in enumerate(parts):
        im = _as_input_media(p, with_caption=(i == 0), override_caption=header if i == 0 else None)
        if im:
            media.append(im)

    if media:
        try:
            await parts[0].bot.send_media_group(
                chat_id=config.admin_chat_id,
                media=media,
                reply_to_message_id=reply_to
            )
        except Exception:
            # fallback: –ø–æ –æ–¥–Ω–æ–º—É (–ø–æ—Ç–æ–º —è–∫–æ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Å—Ç–æ–º)
            for p in parts:
                try:
                    await p.bot.copy_message(config.admin_chat_id, p.chat.id, p.message_id, reply_to_message_id=reply_to)
                except Exception:
                    pass
            # –æ—Ç–¥–µ–ª—å–Ω—ã–π —è–∫–æ—Ä—å, –µ—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ–¥–ø–∏—Å—å—é
            await parts[0].bot.send_message(config.admin_chat_id, header, reply_to_message_id=reply_to)

    # —Å–±—Ä–æ—Å —Å–≤—è–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–ª—å–±–æ–º–æ–≤
    if ctx.get("mode") == "new":
        _u2a_album_comment_id.pop(ctx.get("mgid"), None)

async def _delayed_flush_u2a(mgid: str):
    await asyncio.sleep(0.7)
    await _flush_u2a(mgid)

# ---------- ADMIN -> USER –∞–ª—å–±–æ–º—ã ----------
_a2u_buf: dict[str, list[Message]] = defaultdict(list)
_a2u_ctx: dict[str, dict] = {}      # {mgid: {uid, cid, pid, amid, link}}
_a2u_task: dict[str, asyncio.Task] = {}

async def _flush_a2u(mgid: str):
    parts = _a2u_buf.pop(mgid, [])
    ctx = _a2u_ctx.pop(mgid, None)
    _a2u_task.pop(mgid, None)
    if not parts or not ctx:
        return

    cap_text = (parts[0].caption or "").strip() if parts else None
    header = _hdr_admin_to_user(ctx["link"], ctx["uid"], ctx["cid"], ctx["pid"], ctx["amid"], cap_text or None)

    media = []
    for i, p in enumerate(parts):
        im = _as_input_media(p, with_caption=(i == 0), override_caption=header if i == 0 else None)
        if im:
            media.append(im)

    if media:
        try:
            await parts[0].bot.send_media_group(
                chat_id=ctx["uid"],
                media=media
            )
        except Exception:
            # fallback: –ø–æ –æ–¥–Ω–æ–º—É –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–º —è–∫–æ—Ä—å
            for p in parts:
                try:
                    await p.bot.copy_message(ctx["uid"], p.chat.id, p.message_id)
                except Exception:
                    pass
            await parts[0].bot.send_message(ctx["uid"], header)

def make_intro_text() -> str:
    channel_link = '<a href="https://t.me/w2wcom">WWW.com</a>'
    return (
        "<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞</b>\n\n"

        "üß™ <b>–°—Ç–∞—Ç—É—Å</b>: –∑–∞–∫—Ä—ã—Ç—ã–π –±–µ—Ç–∞-—Ç–µ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "
        f"{channel_link}. –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.\n\n"

        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>:\n"
        "1) –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.\n"
        "2) –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –ø–æ–¥ –ø–æ—Å—Ç–æ–º.\n"
        "3) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞.\n"
        "4) –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏—Ç, –ø—Ä–æ—Å—Ç–æ <i>–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i> –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.\n\n"

        "<b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
        "‚úçÔ∏è —Ç–µ–∫—Å—Ç\n"
        "üñºÔ∏è —Ñ–æ—Ç–æ (–≤ —Ç.—á. –∞–ª—å–±–æ–º)\n"
        "üé¨ –≤–∏–¥–µ–æ\n"
        "üìé –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "üéß –∞—É–¥–∏–æ\n"
        "üéôÔ∏è –≥–æ–ª–æ—Å–æ–≤–æ–µ\n"
        "üé• –∫—Ä—É–∂–æ–∫\n\n"

        "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n"

        "<b>–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–∞</b>:\n"
        "–û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º, <i>–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è</i> –ø–æ–¥–ø–∏—Å—å –∏ —ç–º–æ–¥–∑–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ-–∞–ª—å–±–æ–º–æ–≤ –∏ –º–µ–¥–∏–∞: –∞–ª—å–±–æ–º—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∞ –∫ –º–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ¬´—è–∫–æ—Ä—å¬ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
        "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º - –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–µ—Ä–æ–≤.\n"
        "–£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (–º–µ—Ç–∫–∏ UID/CID/PID/AMID) - –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ —É—Ö–æ–¥–∏—Ç –Ω—É–∂–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"

        f"{BOT_SIGNATURE}"
    )

async def _delayed_flush_a2u(mgid: str):
    await asyncio.sleep(0.7)
    await _flush_a2u(mgid)

# ===================== /start (–∫–Ω–æ–ø–∫–∞) =====================
@router.message(F.chat.type == ChatType.PRIVATE, F.text.startswith("/start"))
async def start_any(m: Message):
    parts = m.text.strip().split(maxsplit=1)
    payload = parts[1] if len(parts) > 1 else ""

    # –ë–µ–∑ payload: –æ–±—â–∏–π —ç–∫—Ä–∞–Ω ¬´–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è¬ª
    if not payload:
        allowed = list(config.allowed_channels or [])
        if len(allowed) == 1:
            name = await _channel_display_name(m.bot, allowed[0])
            text = (
                f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ <b>{html.escape(name)}</b>\n\n"
                f"<b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
                f"‚úçÔ∏è —Ç–µ–∫—Å—Ç\n"
                f"üñºÔ∏è —Ñ–æ—Ç–æ (–≤ —Ç.—á. –∞–ª—å–±–æ–º)\n"
                f"üé¨ –≤–∏–¥–µ–æ\n"
                f"üìé –¥–æ–∫—É–º–µ–Ω—Ç\n"
                f"üéß –∞—É–¥–∏–æ\n"
                f"üéôÔ∏è –≥–æ–ª–æ—Å–æ–≤–æ–µ\n"
                f"üé• –∫—Ä—É–∂–æ–∫\n\n"
                f"<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>:\n"
                f"1) –û—Ç–∫—Ä–æ–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {html.escape(name)}.\n"
                f"2) –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –ø–æ–¥ –ø–æ—Å—Ç–æ–º.\n"
                f"3) –ë–æ—Ç –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ—Å—Ç—É.\n\n"
                f"–û—Ç–º–µ–Ω–∞ - /cancel\n\n"
                f"{BOT_SIGNATURE}"
            )
        else:
            text = make_intro_text()
        return await m.answer(text)

    # –° payload (–∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º): –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
    try:
        chat_id_s, post_id_s = payload.split("msg", 1)
        channel_chat_id = int(chat_id_s)
        post_id = int(post_id_s)
    except Exception:
        return await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º –µ—â—ë —Ä–∞–∑.")

    _pending[m.from_user.id] = (channel_chat_id, post_id)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == m.from_user.id))).scalar_one_or_none()
        if not user:
            user = User(tg_id=m.from_user.id, username=m.from_user.username)
            session.add(user)
        else:
            user.username = m.from_user.username
        await session.commit()

    channel_name = await _channel_display_name(m.bot, channel_chat_id)

    text = (
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ <b>{html.escape(channel_name)}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å <u>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</u> - —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        f"<b>–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
        f"‚úçÔ∏è —Ç–µ–∫—Å—Ç\n"
        f"üñºÔ∏è —Ñ–æ—Ç–æ (–≤ —Ç.—á. –∞–ª—å–±–æ–º)\n"
        f"üé¨ –≤–∏–¥–µ–æ\n"
        f"üìé –¥–æ–∫—É–º–µ–Ω—Ç\n"
        f"üéß –∞—É–¥–∏–æ\n"
        f"üéôÔ∏è –≥–æ–ª–æ—Å–æ–≤–æ–µ\n"
        f"üé• –∫—Ä—É–∂–æ–∫\n\n"
        f"–û—Ç–º–µ–Ω–∞ - /cancel\n\n"
        f"{BOT_SIGNATURE}"
    )
    await m.answer(text)

# ===================== /cancel =====================
@router.message(F.chat.type == ChatType.PRIVATE, F.text == "/cancel")
async def cancel(m: Message):
    _pending.pop(m.from_user.id, None)
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º –µ—â—ë —Ä–∞–∑.")

# ===================== –ê–î–ú–ò–ù -> –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (—Ç–µ–∫—Å—Ç) =====================
@router.message(F.chat.id == config.admin_chat_id, F.reply_to_message, (F.text | F.caption))
async def admin_reply_text(m: Message):
    ctx = _try_extract_from_replied_chain(m)
    if not ctx:
        return await m.reply("–ù–µ –≤–∏–∂—É –º–µ—Ç–æ–∫ –∞–¥—Ä–µ—Å–∞—Ç–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞.")
    uid, cid, pid, _ = ctx

    chat = await m.bot.get_chat(cid)
    link = build_post_link(cid, chat.username, pid)
    body = (m.text or m.caption or "").strip()

    text = _hdr_admin_to_user(link, uid, cid, pid, m.message_id, caption=body or None)
    await m.bot.send_message(uid, text)

# ===================== –ê–î–ú–ò–ù -> –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (–º–µ–¥–∏–∞/–∞–ª—å–±–æ–º) =====================
@router.message(F.chat.id == config.admin_chat_id, F.reply_to_message, (F.photo | F.video | F.document | F.voice | F.audio | F.video_note))
async def admin_reply_media(m: Message):
    ctx = _try_extract_from_replied_chain(m)
    if not ctx:
        return await m.reply("–ù–µ –≤–∏–∂—É –º–µ—Ç–æ–∫ –∞–¥—Ä–µ—Å–∞—Ç–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞.")
    uid, cid, pid, _ = ctx

    chat = await m.bot.get_chat(cid)
    link = build_post_link(cid, chat.username, pid)
    cap = (m.caption or "").strip()
    header = _hdr_admin_to_user(link, uid, cid, pid, m.message_id, caption=cap or None)

    # –∞–ª—å–±–æ–º (photo/video/document)
    if m.media_group_id and (m.photo or m.video or m.document):
        mgid = m.media_group_id
        _a2u_buf[mgid].append(m)
        if mgid not in _a2u_ctx:
            _a2u_ctx[mgid] = {"uid": uid, "cid": cid, "pid": pid, "amid": m.message_id, "link": link}
        if mgid not in _a2u_task:
            _a2u_task[mgid] = asyncio.create_task(_delayed_flush_a2u(mgid))
        return

    # –æ–¥–∏–Ω–æ—á–Ω—ã–µ
    if m.photo:
        await m.bot.send_photo(uid, m.photo[-1].file_id, caption=header, parse_mode="HTML")
    elif m.video:
        await m.bot.send_video(uid, m.video.file_id, caption=header, parse_mode="HTML")
    elif m.document:
        await m.bot.send_document(uid, m.document.file_id, caption=header, parse_mode="HTML")
    elif m.audio:
        await m.bot.send_audio(uid, m.audio.file_id, caption=header, parse_mode="HTML")
    else:
        # voice / video_note ‚Üí –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —è–∫–æ—Ä—å
        await _safe_copy_or_send(m.bot, uid, m)
        await asyncio.sleep(0.3)
        await m.bot.send_message(uid, header)

# ===================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -> –ê–î–ú–ò–ù (—Ç–µ–∫—Å—Ç) =====================
@router.message(F.chat.type == ChatType.PRIVATE, (F.text | F.caption))
async def user_text(m: Message):
    text = (m.text or m.caption or "").strip()
    if not text:
        return await m.answer("–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.")

    # –ø–µ—Ä–µ–ø–∏—Å–∫–∞ (reply –Ω–∞ –±–æ—Ç–∞)
    ctx = _try_extract_from_replied_chain(m) if m.reply_to_message else None
    if ctx:
        uid, cid, pid, amid = ctx
        chat = await m.bot.get_chat(cid)
        link = build_post_link(cid, chat.username, pid)
        who = f"@{m.from_user.username}" if m.from_user.username else f"id:{m.from_user.id}"

        msg_html = _hdr_user_to_admin_reply(who, link, m.from_user.id, cid, pid, caption=text or None)
        await m.bot.send_message(config.admin_chat_id, msg_html, reply_to_message_id=amid or None)
        return await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ctx2 = _pending.get(m.from_user.id)
    if not ctx2:
        return await m.answer("–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º.")
    cid, pid = ctx2

    async with SessionLocal() as session:
        ok, _ = await check_and_hit(session, m.from_user.id)
        if not ok:
            return await m.answer("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user = (await session.execute(select(User).where(User.tg_id == m.from_user.id))).scalar_one()
        comment = Comment(channel_chat_id=cid, post_id=pid, user_id=user.id, text=text)
        session.add(comment); await session.commit()

    chat = await m.bot.get_chat(cid)
    link = build_post_link(cid, chat.username, pid)
    who = f"@{m.from_user.username}" if m.from_user.username else f"id:{m.from_user.id}"

    notify = _hdr_user_to_admin_new(who, link, m.from_user.id, cid, pid, caption=text or None)
    await m.bot.send_message(config.admin_chat_id, notify)

    _pending.pop(m.from_user.id, None)
    await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ===================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -> –ê–î–ú–ò–ù (–º–µ–¥–∏–∞/–∞–ª—å–±–æ–º) =====================
@router.message(F.chat.type == ChatType.PRIVATE, (F.photo | F.video | F.document | F.voice | F.audio | F.video_note))
async def user_media(m: Message):
    # –ø–µ—Ä–µ–ø–∏—Å–∫–∞ (reply –Ω–∞ –±–æ—Ç–∞)
    ctx = _try_extract_from_replied_chain(m) if m.reply_to_message else None
    if ctx:
        uid, cid, pid, amid = ctx
        chat = await m.bot.get_chat(cid)
        link = build_post_link(cid, chat.username, pid)
        who = f"@{m.from_user.username}" if m.from_user.username else f"id:{m.from_user.id}"
        caption = (m.caption or "").strip()
        header = _hdr_user_to_admin_reply(who, link, m.from_user.id, cid, pid, caption=caption or None)

        # –∞–ª—å–±–æ–º?
        if m.media_group_id and (m.photo or m.video or m.document):
            mgid = m.media_group_id
            _u2a_buf[mgid].append(m)
            if mgid not in _u2a_ctx:
                _u2a_ctx[mgid] = {
                    "mode": "reply", "who": who, "uid": m.from_user.id,
                    "cid": cid, "pid": pid, "amid": amid, "link": link, "mgid": mgid
                }
            if mgid not in _u2a_task:
                _u2a_task[mgid] = asyncio.create_task(_delayed_flush_u2a(mgid))
            return

        # –æ–¥–∏–Ω–æ—á–Ω—ã–µ: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–∞—É–¥–∏–æ ‚Äî —Å –ø–æ–¥–ø–∏—Å—å—é; –≥–æ–ª–æ—Å/–∫—Ä—É–∂–æ–∫ ‚Äî –∫–æ–ø–∏—è + —è–∫–æ—Ä—å
        if m.photo:
            await m.bot.send_photo(config.admin_chat_id, m.photo[-1].file_id, caption=header, parse_mode="HTML", reply_to_message_id=amid or None)
        elif m.video:
            await m.bot.send_video(config.admin_chat_id, m.video.file_id, caption=header, parse_mode="HTML", reply_to_message_id=amid or None)
        elif m.document:
            await m.bot.send_document(config.admin_chat_id, m.document.file_id, caption=header, parse_mode="HTML", reply_to_message_id=amid or None)
        elif m.audio:
            await m.bot.send_audio(config.admin_chat_id, m.audio.file_id, caption=header, parse_mode="HTML", reply_to_message_id=amid or None)
        else:
            await _safe_copy_or_send(m.bot, config.admin_chat_id, m, reply_to_message_id=amid or None)
            await asyncio.sleep(0.3)
            await m.bot.send_message(config.admin_chat_id, header, reply_to_message_id=amid or None)

        return await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ /start
    ctx2 = _pending.get(m.from_user.id)
    if not ctx2:
        return await m.answer("–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º.")
    cid, pid = ctx2

    caption = (m.caption or "").strip()
    chat = await m.bot.get_chat(cid)
    link = build_post_link(cid, chat.username, pid)
    who = f"@{m.from_user.username}" if m.from_user.username else f"id:{m.from_user.id}"
    header = _hdr_user_to_admin_new(who, link, m.from_user.id, cid, pid, caption=caption or None)

    # –∞–ª—å–±–æ–º?
    if m.media_group_id and (m.photo or m.video or m.document):
        mgid = m.media_group_id

        # –ë–î: Comment + CommentMedia (–Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞)
        async with SessionLocal() as session:
            ok, _ = await check_and_hit(session, m.from_user.id)
            if not ok:
                return await m.answer("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            user = (await session.execute(select(User).where(User.tg_id == m.from_user.id))).scalar_one()

            if mgid not in _u2a_album_comment_id:
                comment = Comment(channel_chat_id=cid, post_id=pid, user_id=user.id, text=caption or "")
                session.add(comment)
                await session.flush()
                _u2a_album_comment_id[mgid] = comment.id

            comment_id = _u2a_album_comment_id[mgid]
            for t, fid, fuid, g in _media_records_from_message(m, mgid):
                session.add(CommentMedia(
                    comment_id=comment_id,
                    media_type=t,
                    file_id=fid,
                    file_unique_id=fuid,
                    media_group_id=g
                ))
            await session.commit()

        # –ë—É—Ñ–µ—Ä –∞–ª—å–±–æ–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        _u2a_buf[mgid].append(m)
        if mgid not in _u2a_ctx:
            _u2a_ctx[mgid] = {
                "mode": "new", "who": who, "uid": m.from_user.id,
                "cid": cid, "pid": pid, "amid": None, "link": link, "mgid": mgid
            }
        if mgid not in _u2a_task:
            _u2a_task[mgid] = asyncio.create_task(_delayed_flush_u2a(mgid))

    else:
        # –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞: –ë–î
        async with SessionLocal() as session:
            ok, _ = await check_and_hit(session, m.from_user.id)
            if not ok:
                return await m.answer("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            user = (await session.execute(select(User).where(User.tg_id == m.from_user.id))).scalar_one()
            comment = Comment(channel_chat_id=cid, post_id=pid, user_id=user.id, text=caption or "")
            session.add(comment); await session.flush()
            for t, fid, fuid, g in _media_records_from_message(m, None):
                session.add(CommentMedia(
                    comment_id=comment.id,
                    media_type=t,
                    file_id=fid,
                    file_unique_id=fuid,
                    media_group_id=None
                ))
            await session.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–∞—É–¥–∏–æ ‚Äî —Å –ø–æ–¥–ø–∏—Å—å—é; voice/–∫—Ä—É–∂–æ–∫ ‚Äî –∫–æ–ø–∏—è + —è–∫–æ—Ä—å
        if m.photo:
            await m.bot.send_photo(config.admin_chat_id, m.photo[-1].file_id, caption=header, parse_mode="HTML")
        elif m.video:
            await m.bot.send_video(config.admin_chat_id, m.video.file_id, caption=header, parse_mode="HTML")
        elif m.document:
            await m.bot.send_document(config.admin_chat_id, m.document.file_id, caption=header, parse_mode="HTML")
        elif m.audio:
            await m.bot.send_audio(config.admin_chat_id, m.audio.file_id, caption=header, parse_mode="HTML")
        else:
            await _safe_copy_or_send(m.bot, config.admin_chat_id, m)
            await asyncio.sleep(0.3)
            await m.bot.send_message(config.admin_chat_id, header)

    _pending.pop(m.from_user.id, None)
    await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

__all__ = ["router"]